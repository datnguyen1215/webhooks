# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy Webhooks to Amazon ECS

on:
  push:
    branches:
      - 'aws'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write

env:
  APP_NAME: webhooks
  ECS_TASK_DEFINITION: .aws/task-definitions/deploy.json
  ECS_SERVICE: screenbeamcloud-development-o8-backend-service # set this to your Amazon ECS service name
  ECS_CLUSTER: webhooks-cluster

jobs:
  deploy:
    name: Deploy Webhooks to Amazon ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3 #Login using roles with identity provider and roles
        with:
          role-to-assume: arn:aws:iam::288978010356:role/github-actions-role
          role-session-name: githubrolesession
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          docker build -t $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$APP_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.APP_NAME }}
          image: ${{ steps.build-backend-image.outputs.image }}
          environment-variables: 'VERSION=${{ github.sha }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
